package main

import (
	"log"
	"net"

	"golang.org/x/crypto/ssh"
)

// static host key (don't use in production)
var hostKey = []byte(`
-----BEGIN OPENSSH PRIVATE KEY-----
b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABFwAAAAdzc2gtcn
NhAAAAAwEAAQAAAQEAurrp33UQs7ZsWlW+2xXMTkMZEFDz4CfwnD+JF6ndJqAOVhmjRh+3
l+KUcDRSgM8mGZOyiWS3Yw1V3HjhDCuuVyyRvazc7NvVXqCjK/92zxAXzHJAWvzPpML6AY
Hr7X7mzcI37Yca65CeKLmps8/xcsWR/xCtQ9p9M8pEPSZtFWyhCDD/KthSrU+O/AJIAzL7
bTdZSe5lZJPfm8FHpx08Bm2sUIPA1IGaMiA0RuAR2MfC7rN9OCZj06FqLhfWpsYKChv529
uDnXqZrLEa1XggRekz6FRxWThFnnWsDspY68PVppRf2rXp44d5ZwriEa/RiTY3icfjp2Nx
XEWx2l9UHQAAA9BY4P6WWOD+lgAAAAdzc2gtcnNhAAABAQC6uunfdRCztmxaVb7bFcxOQx
kQUPPgJ/CcP4kXqd0moA5WGaNGH7eX4pRwNFKAzyYZk7KJZLdjDVXceOEMK65XLJG9rNzs
29VeoKMr/3bPEBfMckBa/M+kwvoBgevtfubNwjfthxrrkJ4ouamzz/FyxZH/EK1D2n0zyk
Q9Jm0VbKEIMP8q2FKtT478AkgDMvttN1lJ7mVkk9+bwUenHTwGbaxQg8DUgZoyIDRG4BHY
x8Lus304JmPToWouF9amxgoKG/nb24OdepmssRrVeCBF6TPoVHFZOEWedawOyljrw9WmlF
/atenjh3lnCuIRr9GJNjeJx+OnY3FcRbHaX1QdAAAAAwEAAQAAAQAJZZKTXi7C/HEjcqEy
ITywy4udWJWNODVRh5j8id3JLdDK4GtpAfuZNxvFMbzdIo+GRfp8E4dvAqLJf4PDuwcA+A
s1gldzy/RG2MqdUjPGY8bu0OkQKxy/69fs737R6srum9F4sI3YQOTUo9M4a0R5RBv+u/Yc
LgiS7KDWevKOW10UY50rIk+M3I/Ay5TYFZbzpVHf0C5N+IxaB4s2v/WU8dyPlT/0ia2BSv
To5yoNEPOaJigKiUsGskv0/7/TnqPwnlc7bVU4Jfmcxlo3CcdO3prAxFNKElgem76ggKFv
l9Bk9dnUucNRCRMyWm1+E1pGsrO3qJ7yX07iCaAcViB5AAAAgQCLXAO/fXfj3pxBAdaJAz
Lc2otADdwXTPMNOXiucxKPpIvZpP0CrIEfLiFBnC1xX/W4A80Y+fOO0u8TBuI1KZLPcWWh
Lx0jBh9Pga2H9XGyNBpvsNofxCrfI3b5UX4IbjLZOauT5oAEcWEfST4VagTxcn7xjtYKD1
AWGKk3EUklSQAAAIEA353n5M8qGQZD6ZZ1vv0Fjp4l5zqwQTMunIHC8InqKQ2a2qwl8Zvs
9BLFJatnYxhpQF8165FlP+VzfMKSVe93q/G3aWCK/3sxIULEv7NI1qYtynlartfspReiS4
PmXiuPcAdBZw/uoYd2vVm9dy9Lx/aY4DxIgGGaRxGi6oVC1tMAAACBANXFhCFw/Vjrz4Sw
lZFHMRIMrfhqDqCIbBFgyysAY1RqWevENNxHM8W3naRGZB278clEXtDIVtTBhW9qTWUhnP
S9tSYAUO6EdvnUlGj/aQMXlqXfcepfUzggr0Olzj/5FTGOEqOEe9R8A/yF9RhBLiPOJyq4
IAUd3i5g86ZsYTNPAAAAE21hZGFtc0BDMDJZODBWMUpHSDcBAgMEBQYH
-----END OPENSSH PRIVATE KEY-----
`)

func handleConnection(nConn net.Conn, config *ssh.ServerConfig) {
	conn, chans, reqs, err := ssh.NewServerConn(nConn, config)
	if err != nil {
		log.Printf("failed to handshake: %s", err)
		return
	}
	defer conn.Close()
	log.Printf("user authenticated successfully from %s", nConn.RemoteAddr().String())

	go ssh.DiscardRequests(reqs)

	for newChannel := range chans {
		if newChannel.ChannelType() != "session" {
			newChannel.Reject(ssh.UnknownChannelType, "unknown channel type")
			continue
		}
		channel, _, err := newChannel.Accept()
		if err != nil {
			log.Printf("Could not accept channel: %v", err)
			continue
		}

		channel.Close()
	}
}

func main() {
	config := &ssh.ServerConfig{
		PublicKeyCallback: func(conn ssh.ConnMetadata, key ssh.PublicKey) (*ssh.Permissions, error) {
			// every public key is accepted (not for production use)
			return nil, nil
		},
	}

	private, err := ssh.ParsePrivateKey(hostKey)
	if err != nil {
		log.Fatal("Failed to parse host private key: ", err)
	}

	config.AddHostKey(private)

	log.Printf("Vulnerable SSH server running on 0.0.0.0:2022")
	listener, err := net.Listen("tcp", "0.0.0.0:2022")
	if err != nil {
		log.Fatal("failed to listen for connection: ", err)
	}
	for {
		nConn, err := listener.Accept()
		if err != nil {
			log.Fatal("failed to accept incoming connection: ", err)
		}

		go handleConnection(nConn, config)
	}

}
